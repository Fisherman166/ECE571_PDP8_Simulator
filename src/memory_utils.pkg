// ECE571 Project: PDP8 Simulator
// memory_utils.pkg

`ifndef MEMORY_UTILS
`define MEMORY_UTILS

`define WORDS_PER_PAGE 128
`define PAGES 32
`define INVALID 0
`define VALID 1
`define DATA_READ 0
`define INSTRUCTION_FETCH 1
`define WORDSIZE 12

package memory_utils;

	typedef logic [11:0] word;

	typedef struct packed {
		word data;
		logic valid;
	} memory_element;

    typedef enum logic [3:0] {IDLE =    4'b0001,
                              READ =    4'b0010,
                              WRITE =   4'b0100,
                              DONE =    4'b1000} states;

	memory_element [`PAGES * `WORDS_PER_PAGE] memory;
	integer memory_trace_file;

	function void init_mem();
		for(int i =0; i < `PAGES * `WORDS_PER_PAGE; i++) begin
			memory[i].valid = 1'b0;
		end
	endfunction

	function void print_valid_memory();
		$display("******************************PRINTING VALID MEMORY**************************\n");
		$display("Address    Contents\n");
		$display("-------    --------\n");

		for(int i = 0; i < `PAGES * `WORDS_PER_PAGE; i++) begin
			if(memory[i].valid === 1'b1) begin
				$display("%04o        %04o\n", i, memory[i].data);
			end //if
		end //for
	endfunction

	function void trace_init();
		automatic string tracefile_name = "memory_trace.txt";
		memory_trace_file = $fopen(tracefile_name, "w");

		if(memory_trace_file == 0) begin
			$display("Memory trace file failed to open");
		end
		else begin
			$display("Memory trace file opened sucessfully");
		end
	endfunction

	function void trace_close();
		$fclose(memory_trace_file);
	endfunction
endpackage

import memory_utils::*;

`endif

